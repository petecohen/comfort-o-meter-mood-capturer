#include <XBee.h>
#include <PString.h>


XBee xbee = XBee();

#define CODE_VERSION 2.3

// variables
unsigned long samplingDelay = 20; // default sampling delay in millis (SUPERCEDED BY ANYTHING STORED IN EEPROM)
unsigned long lastSampleTime = 0;
String inputString = "";   // a string to hold incoming data

// button variables
unsigned long total = 0;
unsigned long sinceLast = 0;


int sentPacket = 0;

void sendInfoPayload(String info) {
  info.replace('\n', ',');
  info.replace('\r', ' ');
  char payload[2+info.length()];
  payload[0] = 0xf3;  // payload type
  PString infoString(&payload[1], sizeof(payload)-1);
  infoString.print(info);
    
  // Specify the address of the remote XBee (this is the SH + SL)
  XBeeAddress64 addr64 = XBeeAddress64(0x0, 0x0); // Coordinator address
  
  // Create a TX Request
  ZBTxRequest zbTx = ZBTxRequest(addr64, (uint8_t *)payload, sizeof(payload));
  
  // Send the request
  xbee.send(zbTx);
}

// SETUP ------------------------------------------------------------------------------------------------------

void setup() {
  Serial.begin(9600);
  xbee.setSerial(Serial);


  // while the serial stream is not open, do nothing.
  //
  // WARNING: Needs to be removed for production release!!!
  //while (!Serial) ;
  sendInfoPayload("Initializing...");

  char versionBuffer[10];
  sendInfoPayload("SensorMote (Google I/O) v" + String(dtostrf(CODE_VERSION, 6, 2, versionBuffer)));
  
}
  
  // LOOP ------------------------------------------------------------------------------------------------------
//
// Main loop
// 1) Checks to see whether we should send a data sample
// 2) Looks for button pushes
// 3) Looks for config updates on the XBee network

void loop() 

  {

  if ((millis() - lastSampleTime) > samplingDelay || lastSampleTime==0) {
    //Serial.println( "Getting Sample..." );
    getSample();
    lastSampleTime = millis();
  } 

  // Check Mesh network for sample rate update
  checkForInput();  
}

// DIGI PIN READ ------------------------------------------------------------------------------------------------------

}

void loop(){
  // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);

  // check if the pushbutton is pressed.
  // if it is, the buttonState is HIGH:
  if (buttonState == HIGH) {     
    // turn LED on:    
    digitalWrite(ledPin, HIGH);  
  } 
  else {
    // turn LED off:
    digitalWrite(ledPin, LOW); 
  }
}
// ------------------------------------------------------------------------------------------------------

  // Send readings to the ZigBee coordinator
  char buffer[10];
  String readings = "names=temp,pressure,humidity,light,altitude,mic,gas&values=";
  readings += temperature;
  sendInfoPayload(readings);

  digitalWrite(loop_led, LOW);
  sinceLast = 0;
}
