#include <XBee.h>
#include <PString.h>


const int buttonPin = 2;     // the number of the pushbutton pin

// variables will change:
int buttonState = 0;         // variable for reading the pushbutton status



XBee xbee = XBee();

#define CODE_VERSION 2.3

// variables
unsigned long samplingDelay = 500; // default sampling delay in millis (SUPERCEDED BY ANYTHING STORED IN EEPROM)
unsigned long lastSampleTime = 0;
String inputString = "";   // a string to hold incoming data

// button variables
unsigned long total = 0;
unsigned long sinceLast = 0;


int sentPacket = 0;

void sendInfoPayload(String info) {
  info.replace('\n', ',');
  info.replace('\r', ' ');
  char payload[2+info.length()];
  payload[0] = 0xf3;  // payload type
  PString infoString(&payload[1], sizeof(payload)-1);
  infoString.print(info);
    
  // Specify the address of the remote XBee (this is the SH + SL)
  XBeeAddress64 addr64 = XBeeAddress64(0x0, 0x0); // Coordinator address
  
  // Create a TX Request
  ZBTxRequest zbTx = ZBTxRequest(addr64, (uint8_t *)payload, sizeof(payload));
  
  // Send the request
  xbee.send(zbTx);
}

// SETUP ------------------------------------------------------------------------------------------------------

void setup() {
  Serial.begin(9600);
  xbee.setSerial(Serial);

  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);    

  // while the serial stream is not open, do nothing.
  //
  // WARNING: Needs to be removed for production release!!!
  //while (!Serial) ;
  sendInfoPayload("Initializing...");

  char versionBuffer[10];
  sendInfoPayload("SensorMote (Google I/O) v" + String(dtostrf(CODE_VERSION, 6, 2, versionBuffer)));
 
  
}
  
  // LOOP ------------------------------------------------------------------------------------------------------
//
// Main loop
// 1) Checks to see whether we should send a data sample
// 2) Looks for button pushes
// 3) Looks for config updates on the XBee network

void loop() {
  if ((millis() - lastSampleTime) > samplingDelay || lastSampleTime==0) {
    //Serial.println( "Getting Sample..." );
    getButtonPress();
    lastSampleTime = millis();
  } 
}

// DIGI PIN READ ------------------------------------------------------------------------------------------------------

void getButtonPress(){
  // read the state of the pushbutton value:
  int buttonState = digitalRead(buttonPin);

  // check if the pushbutton is pressed.
  // if it is, the buttonState is HIGH:
  if (buttonState == HIGH) { 
    Serial.print ("The button has been pressed");    

  } 
  else {
    Serial.print ("The button is off");    

  }
}
